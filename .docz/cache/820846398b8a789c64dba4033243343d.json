{
  "remainingRequest": "/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"env\",{\"targets\":{\"node\":\"6\"}}],[\"/Users/ritz078/projects/pebble/node_modules/babel-preset-react-app/index.js\",{\"flow\":false}],\"/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/@babel/preset-typescript/lib/index.js\"],\"plugins\":[\"/Users/ritz078/projects/pebble/node_modules/react-hot-loader/babel.js\",\"/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/@babel/plugin-syntax-dynamic-import/lib/index.js\"],\"env\":{\"test\":{\"plugins\":[\"require-context-hook\"]}},\"cacheDirectory\":true,\"babelrc\":false}!/Users/ritz078/projects/pebble/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/ritz078/projects/pebble/src/components/Select.tsx",
  "dependencies": [
    {
      "path": "/Users/ritz078/projects/pebble/src/components/Select.tsx",
      "mtime": 1534351907149
    },
    {
      "path": "/Users/ritz078/projects/pebble/node_modules/cache-loader/dist/cjs.js",
      "mtime": 0
    },
    {
      "path": "/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/babel-loader/lib/index.js",
      "mtime": 1529635966000
    },
    {
      "path": "/Users/ritz078/projects/pebble/node_modules/react-docgen-typescript-loader/dist/index.js",
      "mtime": 1534034887000
    }
  ],
  "contextDependencies": [],
  "result": [
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _jsxFileName = \"/Users/ritz078/projects/pebble/src/components/Select.tsx\";\n\nvar _react = require(\"react\");\n\nvar React = _interopRequireWildcard(_react);\n\nvar _emotion = require(\"emotion\");\n\nvar _Select = require(\"./styles/Select.styles\");\n\nvar _DropDown = require(\"./DropDown\");\n\nvar _DropDown2 = _interopRequireDefault(_DropDown);\n\nvar _Input = require(\"./Input\");\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _OptionGroupCheckBox = require(\"./OptionGroupCheckBox\");\n\nvar _OptionGroupCheckBox2 = _interopRequireDefault(_OptionGroupCheckBox);\n\nvar _OptionGroupRadio = require(\"./OptionGroupRadio\");\n\nvar _OptionGroupRadio2 = _interopRequireDefault(_OptionGroupRadio);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction noop() {}\n\nvar Select = function Select(props) {\n  var className = props.className,\n      placeholder = props.placeholder,\n      required = props.required,\n      errorMessage = props.errorMessage,\n      _onChange = props.onChange,\n      value = props.value,\n      selected = props.selected,\n      children = props.children,\n      multiSelect = props.multiSelect,\n      _onClear = props.onClear,\n      _onApply = props.onApply,\n      searchBox = props.searchBox,\n      searchBoxPlaceholder = props.searchBoxPlaceholder,\n      onSearchBoxQueryChange = props.onSearchBoxQueryChange;\n  var OptionGroup = multiSelect ? _OptionGroupCheckBox2.default : _OptionGroupRadio2.default;\n  return React.createElement(\"div\", {\n    className: (0, _emotion.cx)(_Select.selectWrapper, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: undefined\n  }, React.createElement(_DropDown2.default, {\n    dropDownClassName: _Select.dropDownClass,\n    labelComponent: function labelComponent(_ref) {\n      var toggleDropdown = _ref.toggleDropdown,\n          isOpen = _ref.isOpen;\n      var chevron = (0, _emotion.cx)(_Select.chevronStyle, \"icon-arrow-drop-down\", {\n        __pebble__select__open: isOpen\n      });\n      return React.createElement(\"div\", {\n        className: _Select.inputWrapper,\n        onClick: toggleDropdown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: undefined\n      }, React.createElement(_Input2.default, {\n        className: _Select.selectInputStyle,\n        placeholder: placeholder,\n        value: value,\n        onChange: noop,\n        required: required,\n        message: isOpen ? \" \" : \"\",\n        errorMessage: errorMessage,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: undefined\n      }), React.createElement(\"i\", {\n        className: chevron,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: undefined\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: undefined\n  }, function (_ref2) {\n    var toggle = _ref2.toggle;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: undefined\n    }, React.createElement(OptionGroup, {\n      selected: selected,\n      onChange: function onChange(_value) {\n        _onChange(_value, props);\n\n        if (!multiSelect) {\n          toggle();\n        }\n      },\n      onApply: function onApply(_value) {\n        _onApply(_value, props);\n\n        toggle();\n      },\n      onClear: function onClear() {\n        _onClear();\n\n        toggle();\n      },\n      searchBox: searchBox,\n      searchBoxPlaceholder: searchBoxPlaceholder,\n      onSearchBoxQueryChange: onSearchBoxQueryChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: undefined\n    }, children));\n  }));\n};\n\nvar _default = Select;\nexports.default = _default;\n\ntry {\n  // @ts-ignore\n  Select.displayName = \"Select\"; // @ts-ignore\n\n  Select.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"Select\",\n    \"props\": {\n      \"className\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"className\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"placeholder\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"placeholder\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"required\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"required\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"errorMessage\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"errorMessage\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"value\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"value\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"selected\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"selected\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"Selected\"\n        }\n      },\n      \"multiSelect\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"multiSelect\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"onChange\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onChange\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(value: Selected, props: SelectProps) => void\"\n        }\n      },\n      \"onApply\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onApply\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(value: Selected, props: SelectProps) => void\"\n        }\n      },\n      \"onClear\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onClear\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"() => void\"\n        }\n      },\n      \"searchBox\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"searchBox\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"searchBoxPlaceholder\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"searchBoxPlaceholder\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"onSearchBoxQueryChange\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onSearchBoxQueryChange\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(query: string) => void\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Select.tsx#Select\"] = {\n      docgenInfo: Select.__docgenInfo,\n      name: \"Select\",\n      path: \"src/components/Select.tsx#Select\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(noop, \"noop\", \"/Users/ritz078/projects/pebble/src/components/Select.tsx\");\n  reactHotLoader.register(Select, \"Select\", \"/Users/ritz078/projects/pebble/src/components/Select.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/ritz078/projects/pebble/src/components/Select.tsx\");\n  leaveModule(module);\n})();\n\n;",
    {
      "version": 3,
      "sources": ["src/components/Select.tsx"],
      "names": [
        "React",
        "noop",
        "Select",
        "props",
        "className",
        "placeholder",
        "required",
        "errorMessage",
        "onChange",
        "value",
        "selected",
        "children",
        "multiSelect",
        "onClear",
        "onApply",
        "searchBox",
        "searchBoxPlaceholder",
        "onSearchBoxQueryChange",
        "OptionGroup",
        "OptionGroupCheckBox",
        "OptionGroupRadio",
        "selectWrapper",
        "dropDownClass",
        "toggleDropdown",
        "isOpen",
        "chevron",
        "chevronStyle",
        "__pebble__select__open",
        "inputWrapper",
        "selectInputStyle",
        "toggle",
        "_value",
        "displayName",
        "__docgenInfo",
        "STORYBOOK_REACT_CLASSES",
        "docgenInfo",
        "name",
        "path",
        "__react_docgen_typescript_loader_error"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/ritz078/projects/pebble",
      "sourcesContent": [
        "import * as React from \"react\";\nimport { cx } from \"emotion\";\nimport { SelectProps } from \"./typings/Select\";\nimport {\n  chevronStyle,\n  dropDownClass,\n  inputWrapper,\n  selectInputStyle,\n  selectWrapper\n} from \"./styles/Select.styles\";\nimport DropDown from \"./DropDown\";\nimport Input from \"./Input\";\nimport OptionGroupCheckBox from \"./OptionGroupCheckBox\";\nimport OptionGroupRadio from \"./OptionGroupRadio\";\n\nfunction noop() {}\n\nconst Select: React.SFC<SelectProps> = props => {\n  const {\n    className,\n    placeholder,\n    required,\n    errorMessage,\n    onChange,\n    value,\n    selected,\n    children,\n    multiSelect,\n    onClear,\n    onApply,\n    searchBox,\n    searchBoxPlaceholder,\n    onSearchBoxQueryChange\n  } = props;\n\n  const OptionGroup: any = multiSelect ? OptionGroupCheckBox : OptionGroupRadio;\n\n  return (\n    <div className={cx(selectWrapper, className)}>\n      <DropDown\n        dropDownClassName={dropDownClass}\n        labelComponent={({ toggleDropdown, isOpen }) => {\n          const chevron = cx(chevronStyle, \"icon-arrow-drop-down\", {\n            __pebble__select__open: isOpen\n          });\n          return (\n            <div className={inputWrapper} onClick={toggleDropdown}>\n              <Input\n                className={selectInputStyle}\n                placeholder={placeholder}\n                value={value}\n                onChange={noop}\n                required={required}\n                message={isOpen ? \" \" : \"\"}\n                errorMessage={errorMessage}\n                readOnly\n              />\n              <i className={chevron} />\n            </div>\n          );\n        }}\n      >\n        {({ toggle }) => (\n          <React.Fragment>\n            <OptionGroup\n              selected={selected}\n              onChange={_value => {\n                onChange(_value, props);\n                if (!multiSelect) {\n                  toggle();\n                }\n              }}\n              onApply={_value => {\n                onApply(_value, props);\n                toggle();\n              }}\n              onClear={() => {\n                onClear();\n                toggle();\n              }}\n              searchBox={searchBox}\n              searchBoxPlaceholder={searchBoxPlaceholder}\n              onSearchBoxQueryChange={onSearchBoxQueryChange}\n            >\n              {children}\n            </OptionGroup>\n          </React.Fragment>\n        )}\n      </DropDown>\n    </div>\n  );\n};\n\nexport default Select;\ntry {\n    // @ts-ignore\n    Select.displayName = \"Select\";\n    // @ts-ignore\n    Select.__docgenInfo = { \"description\": \"\", \"displayName\": \"Select\", \"props\": { \"className\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"className\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"placeholder\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"placeholder\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"required\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"required\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"errorMessage\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"errorMessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"value\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"value\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"selected\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"selected\", \"required\": false, \"type\": { \"name\": \"Selected\" } }, \"multiSelect\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"multiSelect\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onChange\", \"required\": true, \"type\": { \"name\": \"(value: Selected, props: SelectProps) => void\" } }, \"onApply\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onApply\", \"required\": false, \"type\": { \"name\": \"(value: Selected, props: SelectProps) => void\" } }, \"onClear\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onClear\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"searchBox\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"searchBox\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"searchBoxPlaceholder\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"searchBoxPlaceholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"onSearchBoxQueryChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSearchBoxQueryChange\", \"required\": false, \"type\": { \"name\": \"(query: string) => void\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Select.tsx#Select\"] = { docgenInfo: Select.__docgenInfo, name: \"Select\", path: \"src/components/Select.tsx#Select\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"
      ]
    }
  ]
}
