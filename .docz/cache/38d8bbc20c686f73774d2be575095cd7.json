{
  "remainingRequest": "/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"env\",{\"targets\":{\"node\":\"6\"}}],[\"/Users/ritz078/projects/pebble/node_modules/babel-preset-react-app/index.js\",{\"flow\":false}],\"/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/@babel/preset-typescript/lib/index.js\"],\"plugins\":[\"/Users/ritz078/projects/pebble/node_modules/react-hot-loader/babel.js\",\"/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/@babel/plugin-syntax-dynamic-import/lib/index.js\"],\"env\":{\"test\":{\"plugins\":[\"require-context-hook\"]}},\"cacheDirectory\":true,\"babelrc\":false}!/Users/ritz078/projects/pebble/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/ritz078/projects/pebble/src/theme/mixins.ts",
  "dependencies": [
    {
      "path": "/Users/ritz078/projects/pebble/src/theme/mixins.ts",
      "mtime": 1530605093000
    },
    {
      "path": "/Users/ritz078/projects/pebble/node_modules/cache-loader/dist/cjs.js",
      "mtime": 0
    },
    {
      "path": "/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/babel-loader/lib/index.js",
      "mtime": 1529635966000
    },
    {
      "path": "/Users/ritz078/projects/pebble/node_modules/react-docgen-typescript-loader/dist/index.js",
      "mtime": 1534034887000
    }
  ],
  "contextDependencies": [],
  "result": [
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar textEllipsis = exports.textEllipsis = {\n  overflowX: \"hidden\",\n  textOverflow: \"ellipsis\",\n  whiteSpace: \"nowrap\"\n};\nvar flexRow = exports.flexRow = {\n  display: \"flex\",\n  flexDirection: \"row\"\n};\n\nvar flexSpaceBetween = exports.flexSpaceBetween = _objectSpread({}, flexRow, {\n  justifyContent: \"space-between\",\n  alignContent: \"initial\"\n});\n\nvar flexMiddleAlign = exports.flexMiddleAlign = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\"\n};\n\nvar getPlaceholderStyle = exports.getPlaceholderStyle = function getPlaceholderStyle(color) {\n  return {\n    \"::-webkit-input-placeholder\": {\n      color: color\n    },\n    \"::-moz-placeholder\": {\n      color: color\n    },\n    \":-ms-input-placeholder\": {\n      color: color\n    },\n    \":-moz-placeholder\": {\n      color: color\n    },\n    \"::placeholder\": {\n      color: color\n    }\n  };\n};\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(textEllipsis, \"textEllipsis\", \"/Users/ritz078/projects/pebble/src/theme/mixins.ts\");\n  reactHotLoader.register(flexRow, \"flexRow\", \"/Users/ritz078/projects/pebble/src/theme/mixins.ts\");\n  reactHotLoader.register(flexSpaceBetween, \"flexSpaceBetween\", \"/Users/ritz078/projects/pebble/src/theme/mixins.ts\");\n  reactHotLoader.register(flexMiddleAlign, \"flexMiddleAlign\", \"/Users/ritz078/projects/pebble/src/theme/mixins.ts\");\n  reactHotLoader.register(getPlaceholderStyle, \"getPlaceholderStyle\", \"/Users/ritz078/projects/pebble/src/theme/mixins.ts\");\n  leaveModule(module);\n})();\n\n;",
    {
      "version": 3,
      "sources": ["src/theme/mixins.ts"],
      "names": [
        "textEllipsis",
        "overflowX",
        "textOverflow",
        "whiteSpace",
        "flexRow",
        "display",
        "flexDirection",
        "flexSpaceBetween",
        "justifyContent",
        "alignContent",
        "flexMiddleAlign",
        "alignItems",
        "getPlaceholderStyle",
        "color"
      ],
      "mappings": ";;;;;;;;;;;;;;;;AAKO,IAAMA,YAA0B,WAA1BA,YAA0B,GAAG;AACxCC,EAAAA,SAAS,EAAE,QAD6B;AAExCC,EAAAA,YAAY,EAAE,UAF0B;AAGxCC,EAAAA,UAAU,EAAE;AAH4B,CAAnC;AAMA,IAAMC,OAAqB,WAArBA,OAAqB,GAAG;AACnCC,EAAAA,OAAO,EAAE,MAD0B;AAEnCC,EAAAA,aAAa,EAAE;AAFoB,CAA9B;;AAKA,IAAMC,gBAA8B,WAA9BA,gBAA8B,qBACtCH,OADsC;AAEzCI,EAAAA,cAAc,EAAE,eAFyB;AAGzCC,EAAAA,YAAY,EAAE;AAH2B,EAApC;;AAMA,IAAMC,eAAuB,WAAvBA,eAAuB,GAAG;AACrCL,EAAAA,OAAO,EAAE,MAD4B;AAErCM,EAAAA,UAAU,EAAE,QAFyB;AAGrCH,EAAAA,cAAc,EAAE;AAHqB,CAAhC;;AAMA,IAAMI,mBAAmB,WAAnBA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD;AAAA,SAA4B;AAC7D,mCAA+B;AAAEA,MAAAA,KAAK,EAALA;AAAF,KAD8B;AAE7D,0BAAsB;AAAEA,MAAAA,KAAK,EAALA;AAAF,KAFuC;AAG7D,8BAA0B;AAAEA,MAAAA,KAAK,EAALA;AAAF,KAHmC;AAI7D,yBAAqB;AAAEA,MAAAA,KAAK,EAALA;AAAF,KAJwC;AAK7D,qBAAiB;AAAEA,MAAAA,KAAK,EAALA;AAAF;AAL4C,GAA5B;AAAA,CAA5B;;;;;;;;;;;;;0BAvBMb,Y;0BAMAI,O;0BAKAG,gB;0BAMAG,e;0BAMAE,mB",
      "sourceRoot": "/Users/ritz078/projects/pebble",
      "sourcesContent": [
        "import * as React from \"react\";\nimport { CSSObject } from \"create-emotion/types\";\n\ntype Styles = CSSObject | React.CSSProperties;\n\nexport const textEllipsis: Styles | any = {\n  overflowX: \"hidden\",\n  textOverflow: \"ellipsis\",\n  whiteSpace: \"nowrap\"\n};\n\nexport const flexRow: Styles | any = {\n  display: \"flex\",\n  flexDirection: \"row\"\n};\n\nexport const flexSpaceBetween: Styles | any = {\n  ...flexRow,\n  justifyContent: \"space-between\",\n  alignContent: \"initial\"\n};\n\nexport const flexMiddleAlign: Styles = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\"\n};\n\nexport const getPlaceholderStyle = (color: string): Styles => ({\n  \"::-webkit-input-placeholder\": { color },\n  \"::-moz-placeholder\": { color },\n  \":-ms-input-placeholder\": { color },\n  \":-moz-placeholder\": { color },\n  \"::placeholder\": { color }\n});\n"
      ]
    }
  ]
}
