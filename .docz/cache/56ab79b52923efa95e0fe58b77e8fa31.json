{
  "remainingRequest": "/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"env\",{\"targets\":{\"node\":\"6\"}}],[\"/Users/ritz078/projects/pebble/node_modules/babel-preset-react-app/index.js\",{\"flow\":false}],\"/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/@babel/preset-typescript/lib/index.js\"],\"plugins\":[\"/Users/ritz078/projects/pebble/node_modules/react-hot-loader/babel.js\",\"/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/@babel/plugin-syntax-dynamic-import/lib/index.js\"],\"env\":{\"test\":{\"plugins\":[\"require-context-hook\"]}},\"cacheDirectory\":true,\"babelrc\":false}!/Users/ritz078/projects/pebble/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/ritz078/projects/pebble/src/components/Controls.tsx",
  "dependencies": [
    {
      "path": "/Users/ritz078/projects/pebble/src/components/Controls.tsx",
      "mtime": 1534069665974
    },
    {
      "path": "/Users/ritz078/projects/pebble/node_modules/cache-loader/dist/cjs.js",
      "mtime": 0
    },
    {
      "path": "/Users/ritz078/projects/pebble/node_modules/docz-core/node_modules/babel-loader/lib/index.js",
      "mtime": 1529635966000
    },
    {
      "path": "/Users/ritz078/projects/pebble/node_modules/react-docgen-typescript-loader/dist/index.js",
      "mtime": 1534034887000
    }
  ],
  "contextDependencies": [],
  "result": [
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _jsxFileName = \"/Users/ritz078/projects/pebble/src/components/Controls.tsx\";\n\nvar _react = require(\"react\");\n\nvar React = _interopRequireWildcard(_react);\n\nvar _emotion = require(\"emotion\");\n\nvar _theme = require(\"../theme\");\n\nvar _Controls = require(\"./styles/Controls.styles\");\n\nvar _Input = require(\"./styles/Input.styles\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nvar ControlView = function ControlView(_ref) {\n  var label = _ref.label,\n      type = _ref.type,\n      isSelected = _ref.isSelected,\n      className = _ref.className;\n  var isRadio = type === \"radio\";\n  var iconClass = (0, _emotion.cx)(_Controls.iconStyle, {\n    \"icon-radio\": isRadio && !isSelected,\n    \"icon-radio-selected\": isRadio && isSelected,\n    \"icon-checkbox-selected\": !isRadio && isSelected,\n    \"icon-checkbox-unselected\": !isRadio && !isSelected\n  });\n  return React.createElement(\"div\", {\n    className: (0, _emotion.cx)(_Controls.controlViewStyle, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: undefined\n  }, React.createElement(\"i\", {\n    className: iconClass,\n    style: {\n      color: isSelected ? _theme.colors.violet.base : _theme.colors.gray.base\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: undefined\n  }), label);\n};\n\nvar Controls =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Controls, _React$PureComponent);\n\n  function Controls(props) {\n    var _this;\n\n    _classCallCheck(this, Controls);\n\n    _this = _possibleConstructorReturn(this, (Controls.__proto__ || Object.getPrototypeOf(Controls)).call(this, props));\n    Object.defineProperty(_assertThisInitialized(_this), \"handleClick\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(id) {\n        var _this$props = _this.props,\n            onChange = _this$props.onChange,\n            allowToggle = _this$props.allowToggle,\n            selected = _this$props.selected;\n        var result;\n\n        if (_this.isRadio()) {\n          if (allowToggle && id === selected) {\n            id = null;\n          }\n\n          result = id;\n        } else {\n          var _selected = selected || []; // @ts-ignore\n\n\n          var cloned = _selected.slice(0); // @ts-ignore\n\n\n          var index = _selected.findIndex(function (datum) {\n            return datum === id;\n          });\n\n          if (index >= 0) {\n            cloned.splice(index, 1);\n          } else {\n            cloned.push(id);\n          }\n\n          result = cloned;\n        }\n\n        onChange({\n          selected: result\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"isRadio\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        return _this.props.type === \"radio\";\n      }\n    });\n    console.warn(\"pebble: Controls component is deprecated. Instead use RadioGroup or CheckboxGroup.\");\n    return _this;\n  }\n\n  _createClass(Controls, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          renderElement = _this$props2.renderElement,\n          keyExtractor = _this$props2.keyExtractor,\n          selected = _this$props2.selected,\n          className = _this$props2.className,\n          errorMessage = _this$props2.errorMessage;\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, data.map(function (item) {\n        var key = keyExtractor(item);\n        var isSelected = !_this2.isRadio() && Array.isArray(selected) ? selected.indexOf(key) >= 0 : key === selected;\n        return React.createElement(\"div\", {\n          key: key,\n          onClick: function onClick() {\n            return _this2.handleClick(key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, renderElement({\n          item: item,\n          isSelected: isSelected\n        }, _this2.props));\n      }), errorMessage && React.createElement(\"div\", {\n        className: _Input.messageStyle,\n        style: {\n          color: _theme.colors.red.base,\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, errorMessage));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return Controls;\n}(React.PureComponent);\n\nObject.defineProperty(Controls, \"ControlView\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: ControlView\n});\nObject.defineProperty(Controls, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    type: \"radio\",\n    renderElement: function renderElement(_ref2, _ref3) {\n      var item = _ref2.item,\n          isSelected = _ref2.isSelected;\n      var type = _ref3.type,\n          labelExtractor = _ref3.labelExtractor;\n      return React.createElement(ControlView, {\n        type: type,\n        label: labelExtractor(item),\n        isSelected: isSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: undefined\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    labelExtractor: function labelExtractor(item) {\n      return item.label || item.name;\n    }\n  }\n});\nvar _default = Controls;\nexports.default = _default;\n\ntry {\n  // @ts-ignore\n  Controls.displayName = \"Controls\"; // @ts-ignore\n\n  Controls.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"Controls\",\n    \"props\": {\n      \"className\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"className\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"renderElement\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"renderElement\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(args: { item: any; isSelected: boolean; }, props: ControlsProps) => Element\"\n        }\n      },\n      \"data\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"data\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"any[]\"\n        }\n      },\n      \"keyExtractor\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"keyExtractor\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(item: any) => ReactText\"\n        }\n      },\n      \"type\": {\n        \"defaultValue\": {\n          value: \"radio\"\n        },\n        \"description\": \"\",\n        \"name\": \"type\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"ControlType\"\n        }\n      },\n      \"onChange\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onChange\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(args: { selected: string | number | ReactText[]; }) => void\"\n        }\n      },\n      \"allowToggle\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"allowToggle\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"selected\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"selected\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"string | number | ReactText[]\"\n        }\n      },\n      \"labelExtractor\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"labelExtractor\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(item: any) => string\"\n        }\n      },\n      \"errorMessage\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"errorMessage\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Controls.tsx#Controls\"] = {\n      docgenInfo: Controls.__docgenInfo,\n      name: \"Controls\",\n      path: \"src/components/Controls.tsx#Controls\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ControlView, \"ControlView\", \"/Users/ritz078/projects/pebble/src/components/Controls.tsx\");\n  reactHotLoader.register(Controls, \"Controls\", \"/Users/ritz078/projects/pebble/src/components/Controls.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/ritz078/projects/pebble/src/components/Controls.tsx\");\n  leaveModule(module);\n})();\n\n;",
    {
      "version": 3,
      "sources": ["src/components/Controls.tsx"],
      "names": [
        "React",
        "ControlView",
        "label",
        "type",
        "isSelected",
        "className",
        "isRadio",
        "iconClass",
        "iconStyle",
        "controlViewStyle",
        "color",
        "colors",
        "violet",
        "base",
        "gray",
        "Controls",
        "props",
        "id",
        "onChange",
        "allowToggle",
        "selected",
        "result",
        "_selected",
        "cloned",
        "slice",
        "index",
        "findIndex",
        "datum",
        "splice",
        "push",
        "console",
        "warn",
        "data",
        "renderElement",
        "keyExtractor",
        "errorMessage",
        "map",
        "item",
        "key",
        "Array",
        "isArray",
        "indexOf",
        "handleClick",
        "messageStyle",
        "red",
        "width",
        "PureComponent",
        "labelExtractor",
        "name",
        "displayName",
        "__docgenInfo",
        "value",
        "STORYBOOK_REACT_CLASSES",
        "docgenInfo",
        "path",
        "__react_docgen_typescript_loader_error"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/ritz078/projects/pebble",
      "sourcesContent": [
        "import * as React from \"react\";\nimport { cx } from \"emotion\";\nimport { ControlsProps, ControlViewProps } from \"./typings/Controls\";\nimport { colors } from \"../theme\";\nimport { controlViewStyle, iconStyle } from \"./styles/Controls.styles\";\nimport { messageStyle } from \"./styles/Input.styles\";\n\nconst ControlView: React.SFC<ControlViewProps> = ({\n  label,\n  type,\n  isSelected,\n  className\n}) => {\n  const isRadio = type === \"radio\";\n  const iconClass = cx(iconStyle, {\n    \"icon-radio\": isRadio && !isSelected,\n    \"icon-radio-selected\": isRadio && isSelected,\n    \"icon-checkbox-selected\": !isRadio && isSelected,\n    \"icon-checkbox-unselected\": !isRadio && !isSelected\n  });\n\n  return (\n    <div className={cx(controlViewStyle, className)}>\n      <i\n        className={iconClass}\n        style={{\n          color: isSelected ? colors.violet.base : colors.gray.base\n        }}\n      />\n      {label}\n    </div>\n  );\n};\n\nclass Controls extends React.PureComponent<ControlsProps> {\n  static ControlView = ControlView;\n\n  static defaultProps: Partial<ControlsProps> = {\n    type: \"radio\",\n    renderElement: ({ item, isSelected }, { type, labelExtractor }) => (\n      <ControlView\n        type={type}\n        label={labelExtractor(item)}\n        isSelected={isSelected}\n      />\n    ),\n    keyExtractor: item => item.id,\n    labelExtractor: item => item.label || item.name\n  };\n\n  constructor(props) {\n    super(props);\n\n    console.warn(\n      \"pebble: Controls component is deprecated. Instead use RadioGroup or CheckboxGroup.\"\n    );\n  }\n\n  private handleClick = (id: string | number) => {\n    const { onChange, allowToggle, selected } = this.props;\n\n    let result;\n    if (this.isRadio()) {\n      if (allowToggle && id === selected) {\n        id = null;\n      }\n      result = id;\n    } else {\n      const _selected = selected || [];\n      // @ts-ignore\n      let cloned = _selected.slice(0);\n      // @ts-ignore\n      const index = _selected.findIndex(datum => datum === id);\n      if (index >= 0) {\n        cloned.splice(index, 1);\n      } else {\n        cloned.push(id);\n      }\n\n      result = cloned;\n    }\n\n    onChange({\n      selected: result\n    });\n  };\n\n  private isRadio = () => this.props.type === \"radio\";\n\n  render() {\n    const {\n      data,\n      renderElement,\n      keyExtractor,\n      selected,\n      className,\n      errorMessage\n    } = this.props;\n\n    return (\n      <div className={className}>\n        {data.map(item => {\n          const key = keyExtractor(item);\n\n          const isSelected =\n            !this.isRadio() && Array.isArray(selected)\n              ? selected.indexOf(key) >= 0\n              : key === selected;\n          return (\n            <div key={key} onClick={() => this.handleClick(key)}>\n              {renderElement(\n                {\n                  item,\n                  isSelected\n                },\n                this.props\n              )}\n            </div>\n          );\n        })}\n\n        {errorMessage && (\n          <div\n            className={messageStyle}\n            style={{ color: colors.red.base, width: \"100%\" }}\n          >\n            {errorMessage}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Controls;\ntry {\n    // @ts-ignore\n    Controls.displayName = \"Controls\";\n    // @ts-ignore\n    Controls.__docgenInfo = { \"description\": \"\", \"displayName\": \"Controls\", \"props\": { \"className\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"className\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"renderElement\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"renderElement\", \"required\": false, \"type\": { \"name\": \"(args: { item: any; isSelected: boolean; }, props: ControlsProps) => Element\" } }, \"data\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"data\", \"required\": true, \"type\": { \"name\": \"any[]\" } }, \"keyExtractor\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"keyExtractor\", \"required\": true, \"type\": { \"name\": \"(item: any) => ReactText\" } }, \"type\": { \"defaultValue\": { value: \"radio\" }, \"description\": \"\", \"name\": \"type\", \"required\": true, \"type\": { \"name\": \"ControlType\" } }, \"onChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onChange\", \"required\": true, \"type\": { \"name\": \"(args: { selected: string | number | ReactText[]; }) => void\" } }, \"allowToggle\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"allowToggle\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"selected\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"selected\", \"required\": true, \"type\": { \"name\": \"string | number | ReactText[]\" } }, \"labelExtractor\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"labelExtractor\", \"required\": false, \"type\": { \"name\": \"(item: any) => string\" } }, \"errorMessage\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"errorMessage\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Controls.tsx#Controls\"] = { docgenInfo: Controls.__docgenInfo, name: \"Controls\", path: \"src/components/Controls.tsx#Controls\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"
      ]
    }
  ]
}
